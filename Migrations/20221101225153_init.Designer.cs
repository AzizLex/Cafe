// <auto-generated />
using System;
using Cafe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cafe.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221101225153_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookingFormExtraService", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("ExtrasId")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "ExtrasId");

                    b.HasIndex("ExtrasId");

                    b.ToTable("BookingFormExtraService");
                });

            modelBuilder.Entity("BookingFormVenue", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("VenuesId")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "VenuesId");

                    b.HasIndex("VenuesId");

                    b.ToTable("BookingFormVenue");
                });

            modelBuilder.Entity("Cafe.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mi tellus, volutpat sit amet efficitur id, venenatis et metus. Mauris laoreet eros eget est consequat, ut rhoncus tortor accumsan. Vivamus purus dui, porta eget blandit consequat, semper sed nulla. Morbi suscipit dolor sem, placerat congue sem fermentum eu. Nam mi nulla, ullamcorper et enim non, maximus cursus nunc. Nunc suscipit gravida varius. Interdum et malesuada fames ac ante ipsum primis in faucibus.\r\n\r\nQuisque metus dui, malesuada vitae libero sit amet, ullamcorper blandit risus. Nam vitae est tincidunt, luctus risus sed, lobortis turpis. Sed in dictum orci. Nullam sed neque nec lacus ultrices fringilla quis eu nibh. Duis tempor mauris eu sem egestas lobortis. Vivamus pellentesque sapien non orci facilisis, in accumsan lorem porttitor. Aliquam erat volutpat. In a scelerisque eros. Ut sit amet ante massa. Nulla turpis metus, tincidunt eget tortor sit amet, euismod venenatis lorem. Duis libero ipsum, mattis vel quam eget, porta iaculis justo. Proin nulla lacus, mollis vitae malesuada quis, pulvinar eget risus. Curabitur euismod elit tristique, commodo enim at, facilisis est.\r\n\r\nInteger tincidunt dapibus lorem, nec varius lorem sodales quis. Curabitur nec nulla tempor, molestie augue a, dignissim nunc. Aenean pretium volutpat urna, id varius mi laoreet sit amet. Donec mi lacus, mollis et turpis ac, fringilla cursus orci. Mauris vestibulum lectus consequat ligula ultrices, eu elementum turpis imperdiet. Mauris sed condimentum ligula, non ornare quam. Curabitur laoreet nunc non odio euismod, eu ultrices quam laoreet. Morbi at faucibus neque",
                            Motto = "Motto",
                            Name = "Om  Café",
                            URL = "https://picsum.photos/id/1060/5598/3732.jpg"
                        });
                });

            modelBuilder.Entity("Cafe.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e973922-a44d-4543-a6c6-9814d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14496603-853c-4ea2-8d1c-43af2b78cbe3",
                            Email = "e@mail.com",
                            EmailConfirmed = true,
                            FirstName = "FirstName",
                            LastName = "LastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "E@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPyEvC/uSODgqdEAYZLLt2ZKX5dOy7/Lxp1rgYa8CHAu7DTkn9FVA7Ec8r045RjSOg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0db6f357-89b3-4476-bc7e-ddb3f95389ee",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Cafe.Models.BookingForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cuisine")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guests")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plates")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BookingForms");
                });

            modelBuilder.Entity("Cafe.Models.ContactForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactForms");
                });

            modelBuilder.Entity("Cafe.Models.ExtraService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ExtraServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Checked = false,
                            Name = "Dekoration",
                            Price = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Checked = false,
                            Name = "Städning",
                            Price = 0.0
                        },
                        new
                        {
                            Id = 3,
                            Checked = false,
                            Name = "Utkörning",
                            Price = 0.0
                        });
                });

            modelBuilder.Entity("Cafe.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Galleries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Galleri1",
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Galleri2",
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cafe.Models.GalleryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("GalleryImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            GalleryId = 1,
                            TimeStamp = new DateTime(2022, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            URL = "https://picsum.photos/id/1060/5598/3732.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            GalleryId = 1,
                            TimeStamp = new DateTime(2022, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            URL = "https://picsum.photos/id/1059/7360/4912.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            GalleryId = 1,
                            TimeStamp = new DateTime(2022, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            URL = "https://picsum.photos/id/1068/7117/4090.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            GalleryId = 2,
                            TimeStamp = new DateTime(2022, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            URL = "https://picsum.photos/id/113/4168/2464.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            GalleryId = 2,
                            TimeStamp = new DateTime(2022, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            URL = "https://picsum.photos/id/117/1544/1024.jpg"
                        });
                });

            modelBuilder.Entity("Cafe.Models.MenuCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Förrätter"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Huvudrätter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drycker"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Efterrätter"
                        });
                });

            modelBuilder.Entity("Cafe.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuSubCatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuSubCatId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Description = "Kycklingkryddor och salt.",
                            MenuSubCatId = 1,
                            Name = "Kycklingvingar",
                            Price = 45.0,
                            URL = "/image/menu/kycklingvingar.jpg"
                        },
                        new
                        {
                            Id = 102,
                            Description = "Bulgur, köttfärs, röd paprika, blandade kryddor, salt, lök, morot, persilja.",
                            MenuSubCatId = 1,
                            Name = "Kubba Tarabulsi",
                            Price = 65.0,
                            URL = "/image/menu/kibbeh.jpg"
                        },
                        new
                        {
                            Id = 103,
                            Description = "Mozzarella.",
                            MenuSubCatId = 1,
                            Name = "Mozzarella chips",
                            Price = 73.0,
                            URL = "/image/menu/mozzarella-sticks.jpg"
                        },
                        new
                        {
                            Id = 104,
                            Description = "Chili cheese 6st.",
                            MenuSubCatId = 1,
                            Name = "Chili cheese",
                            Price = 73.0,
                            URL = "/image/menu/chili-cheese.jpg"
                        },
                        new
                        {
                            Id = 105,
                            Description = "Pommes.",
                            MenuSubCatId = 1,
                            Name = "Pommes",
                            Price = 73.0,
                            URL = "/image/menu/french-fries.jpg"
                        },
                        new
                        {
                            Id = 106,
                            Description = "Kycklinglever (Sauda Djaj).",
                            MenuSubCatId = 1,
                            Name = "Kycklinglever (Sauda Djaj)",
                            Price = 73.0,
                            URL = "/image/menu/chicken-liver.jpg"
                        },
                        new
                        {
                            Id = 107,
                            Description = "Lökringar 8st.",
                            MenuSubCatId = 1,
                            Name = "Lökringar",
                            Price = 73.0,
                            URL = "/image/menu/lokringar.jpg"
                        },
                        new
                        {
                            Id = 108,
                            Description = "Ostrullar 6st.",
                            MenuSubCatId = 1,
                            Name = "Ostrullar",
                            Price = 73.0,
                            URL = "/image/menu/ostrullar.jpg"
                        },
                        new
                        {
                            Id = 201,
                            Description = "Persilja, färska tomater, lök, olivolja, bulgurvete, pressad citron och kryddor.",
                            MenuSubCatId = 2,
                            Name = "Tabouleh",
                            Price = 45.0,
                            URL = "/image/menu/tabbouleh-salad.jpg"
                        },
                        new
                        {
                            Id = 202,
                            Description = "Gurka, tomater, rödlök, rädisor, persilja, mynta, olivolja, citron, sumak, salt.",
                            MenuSubCatId = 2,
                            Name = "Fatoush",
                            Price = 65.0,
                            URL = "/image/menu/fatoush.jpg"
                        },
                        new
                        {
                            Id = 203,
                            Description = "Valnötter, paprika, ströbröd, vitlök, spiskummin, chili, granatäppelsirap, olivolja, citronsaft, kryddor.",
                            MenuSubCatId = 2,
                            Name = "Muhammara",
                            Price = 73.0,
                            URL = "/image/menu/muhammara.jpg"
                        },
                        new
                        {
                            Id = 204,
                            Description = "Aubergin, tahini, vitlök, citronjuice, salt.",
                            MenuSubCatId = 2,
                            Name = "Baba ghanoush (Matbal)",
                            Price = 73.0,
                            URL = "/image/menu/baba-ghanoush.jpg"
                        },
                        new
                        {
                            Id = 205,
                            Description = "Gurka, yoghurt, vitlök, salt, svartpeppar.",
                            MenuSubCatId = 2,
                            Name = "Tzatziki",
                            Price = 73.0,
                            URL = "/image/menu/tzatziki.jpg"
                        },
                        new
                        {
                            Id = 206,
                            Description = "Gurka, rödlök, tomater, vitost, oregano, oliver, olivolja, rödvinsvinäger, svartpeppar.",
                            MenuSubCatId = 2,
                            Name = "Grekisk sallad",
                            Price = 73.0,
                            URL = "/image/menu/grekisk-sallad.jpg"
                        },
                        new
                        {
                            Id = 207,
                            Description = "Chips.",
                            MenuSubCatId = 2,
                            Name = "Chips",
                            Price = 73.0,
                            URL = "/image/menu/chips.jpg"
                        },
                        new
                        {
                            Id = 208,
                            Description = "Nötter.",
                            MenuSubCatId = 2,
                            Name = "Nötter",
                            Price = 73.0,
                            URL = "/image/menu/nuts.jpg"
                        },
                        new
                        {
                            Id = 209,
                            Description = "Kikärtor, tahini, citronjuice, vitlök, olivolja, kummin, persilja, peppar, chili, salt.",
                            MenuSubCatId = 2,
                            Name = "Hummus Beiruti",
                            Price = 73.0,
                            URL = "/image/menu/hummus.jpg"
                        },
                        new
                        {
                            Id = 210,
                            Description = "Kyckling, potatis, saltgurka, gröna ärtor, lök, majonnäs, ägg, oliver, persilja.",
                            MenuSubCatId = 2,
                            Name = "Sallad Olivier",
                            Price = 73.0,
                            URL = "/image/menu/olivier-sallad.jpg"
                        },
                        new
                        {
                            Id = 211,
                            Description = "Labneh.",
                            MenuSubCatId = 2,
                            Name = "Labneh",
                            Price = 73.0,
                            URL = "/image/menu/labneh.jpg"
                        },
                        new
                        {
                            Id = 212,
                            Description = "Fetaost.",
                            MenuSubCatId = 2,
                            Name = "Fetaost",
                            Price = 73.0,
                            URL = "/image/menu/feta.jpg"
                        },
                        new
                        {
                            Id = 301,
                            Description = "Pasta, olivolja, mozzarella, soltorkade tomater, paprika, rödlök, rucola, salt, svartpeppar.",
                            MenuSubCatId = 3,
                            Name = "Pastasallad",
                            Price = 120.0,
                            URL = "/image/menu/pastasallad.jpg"
                        },
                        new
                        {
                            Id = 302,
                            Description = "Kycklingfilé, olivolja, soja, vinäger, tomatpuré, vitlök.",
                            MenuSubCatId = 3,
                            Name = "Kycklingspett",
                            Price = 135.0,
                            URL = "/image/menu/kycklingspett.jpg"
                        },
                        new
                        {
                            Id = 303,
                            Description = "Kyckling Crispy (med pommes).",
                            MenuSubCatId = 3,
                            Name = "Kyckling Crispy",
                            Price = 255.0,
                            URL = "/image/menu/kyckling-crispy.jpg"
                        },
                        new
                        {
                            Id = 304,
                            Description = "Kyckling Shawarma (med pommes eller ris).",
                            MenuSubCatId = 3,
                            Name = "Kyckling Shawarma",
                            Price = 255.0,
                            URL = "/image/menu/shawarma.jpg"
                        },
                        new
                        {
                            Id = 305,
                            Description = "Halv kyckling (med pommes eller ris).",
                            MenuSubCatId = 3,
                            Name = "Halv kyckling",
                            Price = 255.0,
                            URL = "/image/menu/halv-kyckling.jpg"
                        },
                        new
                        {
                            Id = 401,
                            Description = "Hamburgare 150gr (med pommes).",
                            MenuSubCatId = 4,
                            Name = "Hamburgare",
                            Price = 120.0,
                            URL = "/image/menu/burgare-pommes.jpg"
                        },
                        new
                        {
                            Id = 402,
                            Description = "Quzy med ris.",
                            MenuSubCatId = 4,
                            Name = "Quzy med ris",
                            Price = 135.0,
                            URL = "/image/menu/quzy.jpg"
                        },
                        new
                        {
                            Id = 403,
                            Description = "Falafeltallrik.",
                            MenuSubCatId = 4,
                            Name = "Falafeltallrik",
                            Price = 255.0,
                            URL = "/image/menu/falafel.jpg"
                        },
                        new
                        {
                            Id = 404,
                            Description = "Kebabpizza.",
                            MenuSubCatId = 4,
                            Name = "Kebabpizza",
                            Price = 255.0,
                            URL = "/image/menu/kebab-pizza.jpg"
                        },
                        new
                        {
                            Id = 405,
                            Description = "Kycklingpizza.",
                            MenuSubCatId = 4,
                            Name = "Kycklingpizza",
                            Price = 255.0,
                            URL = "/image/menu/kyckling-pizza.jpg"
                        },
                        new
                        {
                            Id = 406,
                            Description = "Havanapizza.",
                            MenuSubCatId = 4,
                            Name = "Havanapizza",
                            Price = 255.0,
                            URL = "/image/menu/havana-pizza.jpg"
                        },
                        new
                        {
                            Id = 407,
                            Description = "Kebabtallrik (med pommes).",
                            MenuSubCatId = 4,
                            Name = "Kebabtallrik",
                            Price = 255.0,
                            URL = "/image/menu/kebab-fries4.jpg"
                        },
                        new
                        {
                            Id = 501,
                            Description = "Mango.",
                            MenuSubCatId = 5,
                            Name = "Mango",
                            Price = 120.0,
                            URL = "/image/menu/Mango2.jpg"
                        },
                        new
                        {
                            Id = 502,
                            Description = "Banan.",
                            MenuSubCatId = 5,
                            Name = "Banan",
                            Price = 135.0,
                            URL = "/image/menu/banana.jpg"
                        },
                        new
                        {
                            Id = 503,
                            Description = "Hallon.",
                            MenuSubCatId = 5,
                            Name = "Hallon",
                            Price = 255.0,
                            URL = "/image/menu/hallon.jpg"
                        },
                        new
                        {
                            Id = 504,
                            Description = "Jordgubb.",
                            MenuSubCatId = 5,
                            Name = "Jordgubb",
                            Price = 120.0,
                            URL = "/image/menu/jordgubb.jpg"
                        },
                        new
                        {
                            Id = 505,
                            Description = "Apelsin.",
                            MenuSubCatId = 5,
                            Name = "Apelsin",
                            Price = 135.0,
                            URL = "/image/menu/apelsin.jpg"
                        },
                        new
                        {
                            Id = 506,
                            Description = "Havana (cocktail).",
                            MenuSubCatId = 5,
                            Name = "Havana (cocktail)",
                            Price = 255.0,
                            URL = "/image/menu/havana.jpg"
                        },
                        new
                        {
                            Id = 601,
                            Description = "Pepsi.",
                            MenuSubCatId = 6,
                            Name = "Pepsi",
                            Price = 120.0,
                            URL = "/image/menu/pepsi.jpg"
                        },
                        new
                        {
                            Id = 602,
                            Description = "Fanta.",
                            MenuSubCatId = 6,
                            Name = "Fanta",
                            Price = 135.0,
                            URL = "/image/menu/fanta.jpg"
                        },
                        new
                        {
                            Id = 603,
                            Description = "Powerking.",
                            MenuSubCatId = 6,
                            Name = "Powerking",
                            Price = 255.0,
                            URL = "/image/menu/powerking.jpg"
                        },
                        new
                        {
                            Id = 604,
                            Description = "Lemon.",
                            MenuSubCatId = 6,
                            Name = "Lemon",
                            Price = 135.0,
                            URL = "/image/menu/lemon.jpg"
                        },
                        new
                        {
                            Id = 605,
                            Description = "Ayran.",
                            MenuSubCatId = 6,
                            Name = "Ayran",
                            Price = 255.0,
                            URL = "/image/menu/ayran.jpg"
                        },
                        new
                        {
                            Id = 701,
                            Description = "Tea.",
                            MenuSubCatId = 7,
                            Name = "Tea",
                            Price = 120.0,
                            URL = "/image/menu/Tea.jpg"
                        },
                        new
                        {
                            Id = 702,
                            Description = "Kaffe.",
                            MenuSubCatId = 7,
                            Name = "Kaffe",
                            Price = 135.0,
                            URL = "/image/menu/Kaffe.jpg"
                        },
                        new
                        {
                            Id = 703,
                            Description = "Cappuccino.",
                            MenuSubCatId = 7,
                            Name = "Cappuccino",
                            Price = 255.0,
                            URL = "/image/menu/Cappuccino.jpg"
                        },
                        new
                        {
                            Id = 801,
                            Description = "Kunafa.",
                            MenuSubCatId = 8,
                            Name = "Kunafa",
                            Price = 120.0,
                            URL = "/image/menu/Kunafa.jpg"
                        },
                        new
                        {
                            Id = 802,
                            Description = "Chokladtårta.",
                            MenuSubCatId = 8,
                            Name = "Chokladtårta",
                            Price = 135.0,
                            URL = "/image/menu/chokladtarta.jpg"
                        },
                        new
                        {
                            Id = 803,
                            Description = "Daimtårta.",
                            MenuSubCatId = 8,
                            Name = "Daimtårta",
                            Price = 255.0,
                            URL = "/image/menu/daimtarta.jpg"
                        });
                });

            modelBuilder.Entity("Cafe.Models.MenuSubCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MenuCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuSubCats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuCategoryId = 1,
                            Name = "Varm meza",
                            URL = "/image/menu/VarmMeza.jpg"
                        },
                        new
                        {
                            Id = 2,
                            MenuCategoryId = 1,
                            Name = "Kall meza",
                            URL = "/image/menu/KallMeza.jpg"
                        },
                        new
                        {
                            Id = 3,
                            MenuCategoryId = 2,
                            Name = "Sallad och kyckling",
                            URL = "/image/menu/SalladOchKyckling.jpg"
                        },
                        new
                        {
                            Id = 4,
                            MenuCategoryId = 2,
                            Name = "Burgare och pizza",
                            URL = "/image/menu/BurgareOchPizza.jpg"
                        },
                        new
                        {
                            Id = 5,
                            MenuCategoryId = 3,
                            Name = "Färsk juice",
                            URL = "/image/menu/FreshJuice.jpg"
                        },
                        new
                        {
                            Id = 6,
                            MenuCategoryId = 3,
                            Name = "Kalla drycker",
                            URL = "/image/menu/KallaDrycker.jpg"
                        },
                        new
                        {
                            Id = 7,
                            MenuCategoryId = 3,
                            Name = "Varma drycker",
                            URL = "/image/menu/VarmaDrycker.jpg"
                        },
                        new
                        {
                            Id = 8,
                            MenuCategoryId = 4,
                            Name = "Tårtor",
                            URL = "/image/menu/Tartor.jpg"
                        });
                });

            modelBuilder.Entity("Cafe.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "_address",
                            Value = "Street, Zip, City"
                        },
                        new
                        {
                            Id = 2,
                            Key = "_phone",
                            Value = "Phone"
                        },
                        new
                        {
                            Id = 3,
                            Key = "_email",
                            Value = "e@mail.com"
                        },
                        new
                        {
                            Id = 4,
                            Key = "_opening1",
                            Value = "Sön-Tor: 17:00-01:00"
                        },
                        new
                        {
                            Id = 5,
                            Key = "_opening2",
                            Value = "Fre-Lör: 17:00-02:00"
                        },
                        new
                        {
                            Id = 6,
                            Key = "homeSlide",
                            Value = "https://picsum.photos/id/100/2500/1656.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Key = "homeSlide",
                            Value = "https://picsum.photos/id/1002/4312/2868.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Key = "homeSlide",
                            Value = "https://picsum.photos/id/1016/3844/2563.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Key = "homeSlide",
                            Value = "https://picsum.photos/id/102/4320/3240.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Key = "homeSlide",
                            Value = "https://picsum.photos/id/1020/4288/2848.jpg"
                        },
                        new
                        {
                            Id = 11,
                            Key = "venueSlide",
                            Value = "https://picsum.photos/id/1022/6000/3376.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Key = "venueSlide",
                            Value = "https://picsum.photos/id/1021/2048/1206.jpg"
                        },
                        new
                        {
                            Id = 13,
                            Key = "venueSlide",
                            Value = "https://picsum.photos/id/1031/5446/3063.jpg"
                        },
                        new
                        {
                            Id = 14,
                            Key = "venueSlide",
                            Value = "https://picsum.photos/id/1029/4887/2759.jpg"
                        },
                        new
                        {
                            Id = 15,
                            Key = "venueSlide",
                            Value = "https://picsum.photos/id/1033/2048/1365.jpg"
                        });
                });

            modelBuilder.Entity("Cafe.Models.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lead")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Policy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mi tellus, volutpat sit amet efficitur id, venenatis et metus. Mauris laoreet eros eget est consequat, ut rhoncus tortor accumsan. Vivamus purus dui, porta eget blandit consequat, semper sed nulla. Morbi suscipit dolor sem, placerat congue sem fermentum eu. Nam mi nulla, ullamcorper et enim non, maximus cursus nunc. Nunc suscipit gravida varius. Interdum et malesuada fames ac ante ipsum primis in faucibus.\r\n\r\nQuisque metus dui, malesuada vitae libero sit amet, ullamcorper blandit risus. Nam vitae est tincidunt, luctus risus sed, lobortis turpis. Sed in dictum orci. Nullam sed neque nec lacus ultrices fringilla quis eu nibh. Duis tempor mauris eu sem egestas lobortis. Vivamus pellentesque sapien non orci facilisis, in accumsan lorem porttitor. Aliquam erat volutpat. In a scelerisque eros. Ut sit amet ante massa. Nulla turpis metus, tincidunt eget tortor sit amet, euismod venenatis lorem. Duis libero ipsum, mattis vel quam eget, porta iaculis justo. Proin nulla lacus, mollis vitae malesuada quis, pulvinar eget risus. Curabitur euismod elit tristique, commodo enim at, facilisis est.\r\n\r\nInteger tincidunt dapibus lorem, nec varius lorem sodales quis. Curabitur nec nulla tempor, molestie augue a, dignissim nunc. Aenean pretium volutpat urna, id varius mi laoreet sit amet. Donec mi lacus, mollis et turpis ac, fringilla cursus orci. Mauris vestibulum lectus consequat ligula ultrices, eu elementum turpis imperdiet. Mauris sed condimentum ligula, non ornare quam. Curabitur laoreet nunc non odio euismod, eu ultrices quam laoreet. Morbi at faucibus neque",
                            EditDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lead = "Lead",
                            Name = "Integritetspolicy"
                        });
                });

            modelBuilder.Entity("Cafe.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = "Area",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mi tellus, volutpat sit amet efficitur id, venenatis et metus. Mauris laoreet eros eget est consequat, ut rhoncus tortor accumsan.",
                            Equipment = "Utrustning",
                            Guests = "Gäster",
                            Name = "Sal 1",
                            Other = "Övrigt",
                            Price = 0.0,
                            Table = "Bord"
                        },
                        new
                        {
                            Id = 2,
                            Area = "Area",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mi tellus, volutpat sit amet efficitur id, venenatis et metus. Mauris laoreet eros eget est consequat, ut rhoncus tortor accumsan.",
                            Equipment = "Utrustning",
                            Guests = "Gäster",
                            Name = "Sal 2",
                            Other = "Övrigt",
                            Price = 0.0,
                            Table = "Bord"
                        });
                });

            modelBuilder.Entity("Cafe.Models.VenueImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            URL = "https://picsum.photos/id/1060/5598/3732.jpg",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            URL = "https://picsum.photos/id/1059/7360/4912.jpg",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 3,
                            URL = "https://picsum.photos/id/1068/7117/4090.jpg",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 4,
                            URL = "https://picsum.photos/id/113/4168/2464.jpg",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 5,
                            URL = "https://picsum.photos/id/117/1544/1024.jpg",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 6,
                            URL = "https://picsum.photos/id/119/3264/2176.jpg",
                            VenueId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e452e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "c78d7e51-f6f4-4afe-a936-8fdb7c4ad5d1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e973922-a44d-4543-a6c6-9814d048cdb9",
                            RoleId = "2c5e452e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookingFormExtraService", b =>
                {
                    b.HasOne("Cafe.Models.BookingForm", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Models.ExtraService", null)
                        .WithMany()
                        .HasForeignKey("ExtrasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingFormVenue", b =>
                {
                    b.HasOne("Cafe.Models.BookingForm", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Models.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cafe.Models.GalleryImage", b =>
                {
                    b.HasOne("Cafe.Models.Gallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("Cafe.Models.MenuItem", b =>
                {
                    b.HasOne("Cafe.Models.MenuSubCat", "SubCat")
                        .WithMany("Items")
                        .HasForeignKey("MenuSubCatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCat");
                });

            modelBuilder.Entity("Cafe.Models.MenuSubCat", b =>
                {
                    b.HasOne("Cafe.Models.MenuCategory", "Category")
                        .WithMany("SubCats")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cafe.Models.VenueImage", b =>
                {
                    b.HasOne("Cafe.Models.Venue", "Venue")
                        .WithMany("Images")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cafe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cafe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cafe.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cafe.Models.Gallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Cafe.Models.MenuCategory", b =>
                {
                    b.Navigation("SubCats");
                });

            modelBuilder.Entity("Cafe.Models.MenuSubCat", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Cafe.Models.Venue", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
